<?php
/**
 * Created by PhpStorm.
 * User: Sunlee
 * Date: 1/28/2019
 * Time: 2:38 PM
 */

include_once MODELS_PATH."club.php";

include_once MODELS_PATH."sms.php";

include_once MODELS_PATH."Users.php";

include_once MODELS_PATH."Member.php";






trait phone_number {


    public static function all_numbers()
    {

        $orgs = (new club())->renewable_org_list();

        $array_phone = [];

        $orgs = (new club())->renewable_org_list();


        $phone = array_reduce($orgs, function($past,$group) {

            $everyPhone = array_column($group['members']['approved'],"CP");

            $passPhone = array_unique($past,SORT_REGULAR);

            $value =  array_merge($passPhone,array_unique($everyPhone,SORT_REGULAR));

            return $value;

        },[]);


        return $phone;


    }

    public static function by_members(String $renewal, Array $filter) {

        $member = new Member($renewal);

        $users = $member->list_of_users($filter);

    }


}




class post_type
{
    const A = 'club_owner';

    const B = 'club_post';

    const C = 'member_request';

    const D = 'organization_feed';

    const E = 'checklist';

    const F = 'checklist_state';

    const G = 'messages';

    const H = 'club_approval_state';

    const I = 'batch_set';

    const J = 'batch_update';

}


class read_state {

    const UNREAD = 0;

    const READ = 1;

}


class post_details
{

    public $post_url;

    public $type;

    public $full_details = false;

}



abstract class post_state
{

     const  BLOCKED = 1;

     const UN_BLOCK = 0;

     public $post_url;

     public $renewal;

     public $isGlobal;

     public $notify_state = false;

     public $full_details = false;

     use phone_number;

     public function __construct()
     {

         $this->post_url = post::generate_post_path();
     }


     protected function block()
     {

         database::getInstance()->update('feeds',
             ["isBlocked" => post_state::BLOCKED],['path' => $this->post_url]);

     }




    abstract public function insert();

    abstract public function sendSMS();


     public function get() {

         return $this;

     }

}



class post_messages extends post_state {

    const TYPE = "G";

    public $body;

    public $subject;

    public $parent_url;

    public function insert()
    {

        database::getInstance()->insert('admin_messages',[

            "subject" => $this->subject,

            "message" => $this->body,

            "parent_url" => $this->parent_url

        ]);

        return $this;

    }

    public function get()
    {
        return parent::get(); // TODO: Change the autogenerated stub
    }


    public function sendSMS()
    {
        return $this;
    }

}



class post_checklist_state extends post_state
{

    const TYPE = "F";

    public $body;

    public $target_post_url;

    public $status = 0;

    public function insert()
    {

        database::getInstance()->insert('checklist_state_post',[
            "post_url" => $this->post_url,
            "body" => $this->body,
            "target_post_uri" => $this->target_post_url,
            "state" => $this->status
        ]);

        return $this;

    }

    public function get()
    {


        $post = database::getInstance()->get("checklist_state_post","*",
            ["checklist_state_post.post_url" => $this->post_url]);


        $arr = [
            "feeds.path" => $post['target_post_uri'],
            'submission.id[!]' => null,
            "ORDER" => ["submission.id"=>"DESC"]
        ];


        if(!$this->full_details)

            $arr["LIMIT"] = 1;



        $post["attachment"] = post::feeds($arr,false);


        if(!$post or !$post['attachment'])

             $this->block();


        return $post;



    }

    public function sendSMS()
    {
        // TODO: Implement sendSMS() method.
    }

}



class post_checklist extends post_state
{

    const TYPE = "E";

    public $body;

    public $id;

    public $type;

    public $approval = 0;

    public $isMemberState = false;

    public function insert()
    {

        database::getInstance()->insert("submission",[

            "checklist_id" => $this->id,

            "post_url" => $this->post_url,

            "type" => $this->type,

            "body" => $this->body,

            "isApproved" => $this->approval,

            "isMemberState" => $this->isMemberState


        ]);


        return $this;

    }


    public function sendSMS()
    {



        $member = new Member($this->renewal);

        $users = $member->list_of_users(["user.id[!]" => (new Users)->get_id()]);

        $org = club::details($this->renewal);

        $link = PARENT_URI."/SCOA/public/feeds/". $this->renewal;

        $currentUser = (new Users())->current_user();

        $fullname = $currentUser['Firstname'] . " " . $currentUser['Lastname'];

        $timeOfDay = "Good ". Date::getTimeofDay();


        if(!($users && $org)) return;


        foreach ($users as $every => $members)
        {

            $message = null;

            if(!$this->body)
            {

                $message = $timeOfDay . " " .$members["Firstname"] ." From SCOA ";

                $message = $message." a member of ".$org['name'].", ".$fullname." is posted ";

                $message = $message." an updates on your organization/department, visit this link to see on what on her post ";

                $message = $message." ".$link;

            }

            if($this->body)
            {

                $message = $fullname." '".$this->body."' on " . $org['name'];

                $message = $message." visit this link to get more updates on your organization/department ";

                $message = $message." ".$link;

            }



            $phone_format = preg_replace("/[\W\s]/m","",$members['CP']);


                if(!$phone_format) return;

                $sms = sms::send($phone_format,$message);


            }










    }




    public function get()
    {

        $database = new database();

        $result =  $database->query("
        SELECT
        
        
        (select 1 
        from feeds as _feeds 
        right join submission as _submission 
        on _feeds.path = _submission.post_url 
        where _feeds.r_code = feeds.r_code
        and _submission.checklist_id = submission.checklist_id
        and _submission.type = submission.type
        and _submission.isMemberState != 1
        and _submission.isApproved = 1
        ) 
        
        as hasApprovedEntry ,
        
        
        if((select id_checklist 
        from checklist 
        order by  id_checklist desc 
        limit 1 ) = submission.checklist_id,1,0) 
        as is_updated_checklist 
        
        
        FROM dbscoa.submission 
        left join feeds on submission.post_url = feeds.path 
        where post_url = '{$this->post_url}' and
        submission.isApproved != 1
        limit 1")->fetchAll();



        if($result)

            return $result[0];


    }




}




class post_organization_feed extends  post_state
{

    const TYPE = "D";

    public $body;

    public function insert()
    {

        $database = new database();

        $database->insert('org_post',[

            'post_url' => $this->post_url,

            'body' => $this->body,

        ]);

        return $this;

    }


    public function sendSMS()
    {
        // TODO: Implement sendSMS() method.


//        if(!$this->body || !$this->notify_state) return;

        $message = "From SCOA (Announcement) : ". $this->body;

        $phone = phone_number::all_numbers();

        if(!$phone || !$message) return;

        foreach ($phone as $every => $cp)
        {
            sms::send($cp,$message);
        }



    }


}


/**
 *
 * member requesting approval to join organization
 *$type is referred as
 *
 * const JOIN = "A";
 *
 * const APPROVED = "B";
 *
 * const REMOVED = "C";
 *
 */

class post_member_request extends post_state
{

    const TYPE = "C";

    public $type;

    public $target_user;

    public $position;

    public function insert()
    {


        $database = new database();

        $database->insert('member_request',[

            'post_url' => $this->post_url,

            'type' => $this->type,

            'target_user'=> $this->target_user,

            'position_target_user' => $this->position

        ]);

        return $this;

    }


    
    public function get()
    {


       $result =  database::getInstance()->get('member_request',[

           "[>]user" => ['target_user' => 'id']

       ],[
           "user.user_url",
           "user.Lastname",
           "user.Middlename",
           "user.Firstname",
           "user.CP",
           "user.DT",
           "user.profile"
       ],['post_url' => $this->post_url]);


       return array_unique($result,SORT_REGULAR);

    }


    public function sendSMS()
    {
        // TODO: Implement sendSMS() method.
    }

}



class post_club_owner extends post_state
{

    const TYPE = "A";

    public $phones = '';

    public function insert() : post_club_owner
    {


        $database = new database();

        $database->insert('org_creator',['post_url' => $this->post_url]);

        return $this;

    }


    public function sendSMS()
    {


//        $org = club::details($this->renewal);
//
//        $link = PARENT_URI."/SCOA/public/feeds/". $this->renewal;
//
//        $currentUser = (new Users())->current_user();
//
//        $fullname = $currentUser['Firstname'] . " " . $currentUser['Lastname'];
//
//        $timeOfDay = "Good ". Date::getTimeofDay();
//
//        $message = $timeOfDay . " this is to inform you that  ";
//
//        $message = $message.", ".$fullname." is requesting  ";
//
//        $message = $message." you to join '{$org['name']}' a org/dept by using this code '{$org['member_code']}' at our site ";
//
//
//        $message = $message." ".$link ." thank you .";
//
//
//        $phone_format = preg_replace("/[\W\s]/m","",$this->phones);
//
//
//        $phone_format = explode(",",$phone_format);
//
//
//        foreach ($phone_format as $every => $phone) {
//
//            $sms = sms::send($phone,$message);
//
//        }



    }


}


/** approval status of requesting to create new organizaton **/

class post_club_approval_state extends  post_state
{

    const TYPE = "H";

    public $status = -1;


    public function insert()
    {

        $database = new database();

        $database->insert('org_creator',[
            'post_url' => $this->post_url,
            "_status" => $this->status
        ]);

        return $this;

    }



    public function get()
    {


        $database = new database();

        return $database->get('org_creator',"*",[
            "post_url" => $this->post_url
        ]);

    }


    public function sendSMS()
    {
        // TODO: Implement sendSMS() method.
    }


}




class post_batch_set extends post_state {

    const TYPE = "I";

    public $deadline;

    public $date_time;

    public function insert()
    {

        database::getInstance()->insert("checklist",[

            "date_time" => $this->date_time,

            "deadline" => $this->deadline,

            "post_url" => $this->post_url

        ]);

        return $this;

    }


    public function get()
    {

        return database::getInstance()->select('checklist',"*",[
            "post_url" => $this->post_url
        ]);


    }


    public function sendSMS()
    {
        // TODO: Implement sendSMS() method.
    }


}


class post_batch_update extends post_state {

    const TYPE = "J";

    public $date;

    public $batchId;

    public function insert()
    {

        database::getInstance()->insert("batch_update_post",[

            "batchId" => $this->batchId,

            "post_url" => $this->post_url,


        ]);

        return $this;

    }

    public function get()
    {

        return database::getInstance()->get('batch_update_post',[
            "[>]checklist" => ["batchId" => "id_checklist"]
        ],"*",["batch_update_post.post_url" => $this->post_url]);

    }


    public function sendSMS()
    {

        $phones = phone_number::all_numbers();

        $message = "From SCOA (Reminder) we update the deadline for this batch to {$this->date}";

        foreach ($phones as $every => $cp)
        {
            sms::send($cp,$message);
        }

        return $this;

    }


}



class post
{

    private $state;

    public $files;

    public $adminId;

    public $globally = false;

    public $notify = false;

    const MARK_AS_READ = 1;


    public function __construct(post_state $state)
    {

        $this->state = $state;

        $this->adminId = (new Users())->get_id();

    }


    public function create(String $r_code = DEFAULT_VALUE) : bool
    {


        $isValid = is_numeric($this->notify) || is_bool($this->notify);

        if(!$isValid) return false;


        $database = new database();


        $post = $this->state->insert();


        $post_uri = $post->post_url;

        $isStaff = (new Users())->isStaff;


        $result = $database->insert('feeds',[

            "path" => $post_uri,

            "type" => $post::TYPE,

            "user" => (new Users())->get_id(),

            "PDT" => Date::Now(),

            "r_code" => $r_code,

            "isStaff" => $isStaff,

            "isGlobal" => !$r_code && $isStaff ? $this->globally : false,

            "notify_state" => $this->notify

        ]);


        $check =  (bool) $result->rowCount() and $this->save_files($post_uri);


        if($check)
        {


            $this->state->renewal = $r_code;

            $this->state->isGlobal = $this->globally;

            $this->state->notify_state =  (int) $this->notify;

            $this->state->sendSMS();

            return $check;

        }




    }



    public function save_files(String $post_url) : bool
    {

        if(!$this->files) return true;


        foreach ($this->files as $every => $file )
        {

           $is_valid =  constraint::strict($file,['fname','file']);

           if(!$is_valid)

               break;


           database::getInstance()->insert('files',[
                "fname" => $file['fname'],
                "file" => $file['file'],
                "post_path" => $post_url
            ]);



        }

        return true;




    }


    public static function generate_post_path()
    {

        return (new Tokenizer(5))->create()->check([

            'feeds' => 'path',

            'org_creator' => 'post_url',

            'org_post' => 'post_url',

        ]);

    }


    public static function feeds(Array $filter = [],$hasPostDetail = true,$stringQuery = false)
    {

        $database = new database();


        if($stringQuery)

            $database = $database->debug(true);


        $user = (new Users());

        $currentUser = $user->get_id();


        $feeds = $database->select("feeds",[

            "[>]member_request" => ['path' => 'post_url'],
            "[>]org_creator" => ['path' => 'post_url'],
            "[>]org_post" => ['path' => 'post_url'],
            "[>]user" => ['user' => 'id'],
            "[>]staff" => ['user' => 'id'],
            "[>]user (targetUser)" => ['member_request.target_user' => 'id'],
            "[>]submission" => ["path" => "post_url"],
            "[>]checklist" => ["submission.id" => "id_checklist"]

        ],[

            "feeds.Id (feedsId)",
            "feeds.path",
            "feeds.type(feedsType)",
            "feeds.user",
            "feeds.PDT",
            "feeds.r_code",
            "feeds.isStaff",
            "feeds.isRead",
            "feeds.notify_state",
            "feeds.isGlobal",
            "member_request.type(m_requestType)",
            "member_request.decisionBy",
            "member_request.target_user",
            "member_request.position_target_user",
            "org_post.body",
            "user.user_url",
            "user.Lastname",
            "user.Middlename",
            "user.Firstname",
            "user.CP",
            "user.DT",
            "user.profile",
            "staff.Firstname (staffFirstname)",
            "staff.Lastname (staffLastname)",
            "staff.Middlename (staffMiddlename)".
            "staff.Path",
            "submission.checklist_id",
            "submission.type (checklistType)",
            "submission.body (submissionBody)",
            "submission.isApproved (submissionState)",
            "submission.isMemberState (isMemberState)",
            "checklist.date_time (checklistDateSet)",
            "checklist.deadline (checklistDeadline)",

            "isAlreadyRead" => Medoo\Medoo::raw('if((select 1 from user_already_read_post where user_already_read_post.post_url = feeds.path limit 1),1,0)'),
            "currentUser" => \Medoo\Medoo::raw("{$currentUser}"),

            "isUponPDT" => Medoo\Medoo::raw("if((select 1 from members where members.R_code = feeds.r_code AND members.user = {$currentUser} and members.join_date_time <= feeds.PDT limit 1),1,0)"),

            "isUponGlobalPDT" => Medoo\Medoo::raw("if((select 1 from user where user.id = {$currentUser} and user.DT <= feeds.PDT limit 1),1,0)"),

            "org_name" => Medoo\Medoo::raw("(select org.name from renewal left join org on renewal.org_url = org.url where renewal.RCode != 1 limit 1)"),

            "isGlobal" => \Medoo\Medoo::raw("if(feeds.type IN ('I','J'),1,0)"),


        ],$filter);




        return $stringQuery
            ? $database
            : self::additional_information($feeds,$hasPostDetail);


    }





    private static function additional_information(Array $feeds,$hasPostDetail) : Array
    {

        foreach ($feeds as $every_feeds => &$values)
        {

            $information = [

                "org_info" => club::details($values['r_code']),

                "membership" => Member::details($values['r_code'],$values['user']),

                "files" => self::getFiles($values['path'])

            ];




            if($hasPostDetail)
            {

                $details = new post_details();

                $details->post_url = $values['path'];

                $details->type = $values['feedsType'];

                $information["post_details"] = self::post_details($details);


            }



            $values = array_merge($values,$information);

        }

        return $feeds;


    }





    private static function getFiles(String $post_path)
    {

        return database::getInstance()->select("files","*",['post_path' => $post_path]);

    }





    public static function post_details(post_details $details)
    {

        $class = "post_".constant("post_type::{$details->type}");

        if(class_exists($class))
        {
            $info =  new $class();

            $info->post_url = $details->post_url;

            $info->full_details = $details->full_details;

            return $info->get();

        }

        return;
    }



    public static function _sessionKeys(Array $ids)
    {

       $alreadyFoundKeys =  Session::set()->{FEEDS_KEY};

       if($alreadyFoundKeys)

           Session::set()->{FEEDS_KEY} = array_merge($alreadyFoundKeys,$ids);

       if(!$alreadyFoundKeys)

           Session::set()->{FEEDS_KEY} = $ids;


       return Session::set()->{FEEDS_KEY};


    }


    public static function _basicDetails(String $post_url)
    {

       return database::getInstance()->get('feeds',"*",['path' => $post_url]);

    }


    public static function AsRead(Array $filter)
    {

       return  database::getInstance()->update('feeds',[
            "isRead" =>  self::MARK_AS_READ
        ],$filter)->rowCount();

    }


    public static function getTypeOfPost(String $post_url)
    {
       return database::getInstance()->select('feeds',"type",["path" => $post_url]);
    }


    private static function PostAttachmentsURL(String $post_uri)
    {

        return database::getInstance()->select('checklist_state_post','post_url',[
            "target_post_uri" => $post_uri
        ]);

    }


    public static function getAttachmentsDetails(String $post_uri)
    {

        $attachments =  self::PostAttachmentsURL($post_uri);


        if(!$attachments) return;

        return self::feeds([
            "feeds.path" => $attachments
        ]);

    }


    public static function markAsRead(Array $array_post_url) {



        $array_post_url = array_filter($array_post_url,function ($value)
        {

            return !database::getInstance()->has("user_already_read_post",[

                "user" => (new Users())->get_id(),

                "isStaff" => (new Users())->isStaff,

                "post_url" => $value

            ]);

        });



       $temp = array_map(function ($value){

           return [
               "user" => (new Users())->get_id() ,
               "isStaff" => (new Users())->isStaff,
               "post_url" => $value
           ];

       },$array_post_url);


       if(!constraint::removeEmpty($temp)) return false;


     return database::getInstance()
         ->insert("user_already_read_post",$temp)
         ->rowCount();

    }


    public static function getNumberOfUnreadPost() {

        return database::getInstance()->count("feeds",[
           "isRead" => read_state::UNREAD
        ]);

    }


    public static function getNumberOfRequest() {

        return database::getInstance()->count("feeds",[
            "type" => [post_club_owner::TYPE,post_checklist::TYPE],
            "isRead" => read_state::UNREAD
        ]);

    }



    public static function reminders($limit = 5,Array $arr) {

        return post::feeds(array_merge([

            "LIMIT" => $limit,
            "feeds.type" => ["I","J","F","E"]

        ],$arr));

    }







}




